{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRO\\\\Documents\\\\React\\\\flow\\\\src\\\\components\\\\LowerObstacles.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../styles/style.css';\nimport useInterval from '../useInterval';\nimport GridItem from './GridItem'; //Initial speed of obstacles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet currentSpeed = 500;\nlet count;\n\nfunction LowerObstacles(props) {\n  _s();\n\n  //obstacle Count is number of max obstacles to be present on the screen at any given time\n  let obstacleCount = 5;\n  const [obstacle, setObstacle] = useState([]); //Function to move the obstacles at current speed\n\n  function moveObstacles() {\n    let tempStore = Array.from(obstacle);\n\n    for (let i = 0; i < tempStore.length; i++) {\n      tempStore[i][1] = tempStore[i][1] - obstacleCount;\n    }\n\n    setObstacle(tempStore);\n  }\n  /*Function to generate obstacles as current speed x 4 so that not too many obstacles are created and to make\r\n    sure that the generation of objects and the movement ensures that we only have a maximum of five obstacles on \r\n    the screen at any given time\r\n  */\n\n\n  function generateObstacles() {\n    let tempStore = Array.from(obstacle);\n    const random = Math.random() * 50;\n    let height = Math.floor(random / 10) * 10 + 20;\n\n    if (tempStore.length <= obstacleCount) {\n      tempStore.push([height, 105]);\n    } else {\n      tempStore.push([height, 100 + obstacleCount]);\n      tempStore.shift();\n    }\n\n    setObstacle(tempStore);\n    count = count + 1;\n  }\n\n  useInterval(moveObstacles, currentSpeed - props.score);\n  useInterval(generateObstacles, (currentSpeed - props.score) * 4);\n  props.onUpdate(obstacle);\n  const obstacleView = obstacle.map(item => {\n    let color;\n    let top = 100 - item[0];\n    const obstacleStyle = {\n      height: `${item[0]}%`,\n      top: `${top}%`,\n      left: `${item[1]}%`\n    };\n\n    switch (item[0]) {\n      case 20:\n        color = \"#87FF3C\";\n        break;\n\n      case 30:\n        color = \"#FF55EE\";\n        break;\n\n      case 40:\n        color = \"#4332FF\";\n        break;\n\n      case 50:\n        color = \"#00FF91\";\n        break;\n\n      case 60:\n        color = \"#FF002F\";\n        break;\n    }\n\n    const gridStyle = {\n      backgroundColor: color\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"obstacle\",\n      style: obstacleStyle,\n      children: /*#__PURE__*/_jsxDEV(GridItem, {\n        style: gridStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 63\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: obstacleView\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LowerObstacles, \"PQxX58fGo0c49FML1N7LRZcPxrg=\", false, function () {\n  return [useInterval, useInterval];\n});\n\n_c = LowerObstacles;\nexport default LowerObstacles;\n\nvar _c;\n\n$RefreshReg$(_c, \"LowerObstacles\");","map":{"version":3,"names":["React","useEffect","useState","useInterval","GridItem","currentSpeed","count","LowerObstacles","props","obstacleCount","obstacle","setObstacle","moveObstacles","tempStore","Array","from","i","length","generateObstacles","random","Math","height","floor","push","shift","score","onUpdate","obstacleView","map","item","color","top","obstacleStyle","left","gridStyle","backgroundColor"],"sources":["C:/Users/PRO/Documents/React/flow/src/components/LowerObstacles.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport '../styles/style.css'\r\nimport useInterval from '../useInterval'\r\nimport GridItem from './GridItem'\r\n\r\n//Initial speed of obstacles\r\nlet currentSpeed = 500\r\nlet count\r\n\r\nfunction LowerObstacles(props) {\r\n    //obstacle Count is number of max obstacles to be present on the screen at any given time\r\n    let obstacleCount = 5\r\n    const [obstacle, setObstacle] = useState([])\r\n    \r\n    //Function to move the obstacles at current speed\r\n    function moveObstacles(){\r\n        let tempStore = Array.from(obstacle)\r\n        for (let i = 0; i<tempStore.length; i++){\r\n          tempStore[i][1] = tempStore[i][1]-(obstacleCount)\r\n        }\r\n        setObstacle(tempStore)  \r\n      }\r\n    \r\n    /*Function to generate obstacles as current speed x 4 so that not too many obstacles are created and to make\r\n      sure that the generation of objects and the movement ensures that we only have a maximum of five obstacles on \r\n      the screen at any given time\r\n    */\r\n    function generateObstacles(){\r\n      let tempStore = Array.from(obstacle)\r\n      const random = Math.random()*50\r\n      let height = (Math.floor(random/10)*10)+20\r\n  \r\n      if(tempStore.length<=obstacleCount){      \r\n        tempStore.push([height,105])\r\n        }\r\n      else{\r\n        tempStore.push([height,(100+(obstacleCount))])\r\n        tempStore.shift()\r\n      }\r\n      setObstacle(tempStore)\r\n      count = count+1\r\n    }\r\n    \r\n    useInterval(moveObstacles,currentSpeed-props.score)\r\n    useInterval(generateObstacles,(currentSpeed-props.score)*4) \r\n\r\n    props.onUpdate(obstacle)\r\n\r\n    const obstacleView = obstacle.map((item)=>{\r\n        let color\r\n        let top = 100 -item[0]\r\n      const obstacleStyle = {\r\n        height: `${item[0]}%`,\r\n        top: `${top}%`,\r\n        left: `${item[1]}%`\r\n      }\r\n\r\n      switch(item[0]){\r\n        case 20:\r\n          color= \"#87FF3C\"\r\n          break;   \r\n        case 30:\r\n          color = \"#FF55EE\"\r\n          break;\r\n        case 40:\r\n          color= \"#4332FF\"\r\n          break;\r\n        case 50:\r\n          color = \"#00FF91\"\r\n          break;\r\n        case 60:\r\n          color = \"#FF002F\"\r\n          break;\r\n          \r\n      }\r\n\r\n      const gridStyle = {\r\n        backgroundColor: color \r\n      }\r\n\r\n      return( <div className=\"obstacle\" style={obstacleStyle}><GridItem style={gridStyle}/></div>)\r\n    })\r\n    \r\n  \r\n    return (\r\n    <div>\r\n        {obstacleView}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LowerObstacles"],"mappings":"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"},"metadata":{},"sourceType":"module"}