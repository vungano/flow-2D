{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRO\\\\Documents\\\\React\\\\flow\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './styles/style.css';\nimport LowerObstacles from './components/LowerObstacles';\nimport UpperObstacles from './components/UpperObstacles';\nimport Player from './components/Player';\nimport Score from './components/Score';\nimport useInterval from './useInterval';\nimport gameOverSad from './images/sad.png';\nimport { ImSad } from 'react-icons/im';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //States declaration\n  const [playerCoordinates, setPlayerCoordinates] = useState();\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0); //Only update score if gameOver is fasle\n\n  function updateScore() {\n    if (gameOver == false) {\n      setScore(item => item + 10);\n    }\n  } //Update the score every 5 seconds by 10 points\n\n\n  useInterval(updateScore, 5000);\n\n  const getPlayerCoordinates = coordinates => {\n    setPlayerCoordinates(coordinates);\n  };\n  /*Function to get all upperobstacle coordinates and check whether the obstacles are colliding with the player or \r\n    not.  If any one of the coordinates is equal to the player's coordinates then a collision would have occured \r\n    hence set gameOver is equal to true\r\n  */\n\n\n  const getLowerObstaclesCoordinates = coordinates => {\n    for (let i = 0; i < coordinates.length; i++) {\n      if (playerCoordinates[0] == undefined) {} else {\n        if (playerCoordinates[0][1] == coordinates[i][1] && 100 - playerCoordinates[0][0] <= coordinates[i][0]) {\n          setGameOver(true);\n        }\n      }\n    }\n  };\n  /*Function to get all upperobstacle coordinates and check whether the obstacles are colliding with the player or \r\n    not.  If any one of the coordinates is equal to the player's coordinates then a collision would have occured \r\n    hence set gameOver is equal to true\r\n  */\n\n\n  const getUpperObstaclesCoordinates = coordinates => {\n    for (let i = 0; i < coordinates.length; i++) {\n      if (playerCoordinates[0] == undefined) {} else {\n        if (playerCoordinates[0][1] == coordinates[i][1] && playerCoordinates[0][0] < coordinates[i][0]) {\n          setGameOver(true);\n        }\n      }\n    }\n  }; //Reset the game after it has gone into gameOver state\n\n\n  function resetGame() {\n    setGameOver(false);\n    setScore(0);\n  }\n  /* \r\n    The normal game view where the player is able to play the game consisting of the Upper Obstacles, Lower \r\n    Obstacles and the Player. This view is only visible when gameOver is false\r\n  */\n\n\n  const gameView = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas\",\n    children: [/*#__PURE__*/_jsxDEV(UpperObstacles, {\n      onUpdate: getUpperObstaclesCoordinates,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LowerObstacles, {\n      onUpdate: getLowerObstaclesCoordinates,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      onPlayerMove: getPlayerCoordinates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n  /*\r\n    When gameOver becomes true the gameView is replaced by this gameOver view\r\n   */\n\n\n  const gameOverView = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameOver\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ImSad, {\n      size: 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Score \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [gameOver ? gameOverView : gameView, /*#__PURE__*/_jsxDEV(Score, {\n      score: score,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WeV5aavNDUI0S9NVjDiS1Zk2GNU=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","LowerObstacles","UpperObstacles","Player","Score","useInterval","gameOverSad","ImSad","App","playerCoordinates","setPlayerCoordinates","gameOver","setGameOver","score","setScore","updateScore","item","getPlayerCoordinates","coordinates","getLowerObstaclesCoordinates","i","length","undefined","getUpperObstaclesCoordinates","resetGame","gameView","gameOverView","highScore"],"sources":["C:/Users/PRO/Documents/React/flow/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './styles/style.css'\r\nimport LowerObstacles from './components/LowerObstacles'\r\nimport UpperObstacles from './components/UpperObstacles'\r\nimport Player from './components/Player'\r\nimport Score from './components/Score'\r\nimport useInterval from './useInterval'\r\nimport gameOverSad  from './images/sad.png'\r\nimport {ImSad} from 'react-icons/im'\r\n\r\n\r\nfunction App() {\r\n    \r\n    //States declaration\r\n    const [playerCoordinates,setPlayerCoordinates] = useState() \r\n    const [gameOver,setGameOver] = useState(false)\r\n    const[score, setScore] = useState(0)\r\n    \r\n    //Only update score if gameOver is fasle\r\n    function updateScore(){\r\n      if(gameOver==false){\r\n         setScore((item)=> item+10)\r\n      }\r\n    }\r\n    \r\n    //Update the score every 5 seconds by 10 points\r\n    useInterval(updateScore,5000)\r\n    \r\n    \r\n    const getPlayerCoordinates =(coordinates)=>{\r\n      setPlayerCoordinates(coordinates)\r\n    }\r\n\r\n    /*Function to get all upperobstacle coordinates and check whether the obstacles are colliding with the player or \r\n      not.  If any one of the coordinates is equal to the player's coordinates then a collision would have occured \r\n      hence set gameOver is equal to true\r\n    */\r\n      const getLowerObstaclesCoordinates =(coordinates)=>{\r\n      for(let i=0; i<coordinates.length; i++){\r\n        if(playerCoordinates[0]== undefined){}\r\n        else{\r\n          if(playerCoordinates[0][1]== coordinates[i][1] && (100-playerCoordinates[0][0])<=coordinates[i][0]){\r\n           setGameOver(true)\r\n          }\r\n        }\r\n      } \r\n    }\r\n\r\n    /*Function to get all upperobstacle coordinates and check whether the obstacles are colliding with the player or \r\n      not.  If any one of the coordinates is equal to the player's coordinates then a collision would have occured \r\n      hence set gameOver is equal to true\r\n    */\r\n    const getUpperObstaclesCoordinates =(coordinates)=>{\r\n      for(let i=0; i<coordinates.length; i++){\r\n        if(playerCoordinates[0]== undefined){}\r\n        else{\r\n          if(playerCoordinates[0][1]== coordinates[i][1] && playerCoordinates[0][0]<coordinates[i][0]){\r\n            setGameOver(true)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //Reset the game after it has gone into gameOver state\r\n    function resetGame(){\r\n      setGameOver(false)\r\n      setScore(0)\r\n    }\r\n\r\n    /* \r\n      The normal game view where the player is able to play the game consisting of the Upper Obstacles, Lower \r\n      Obstacles and the Player. This view is only visible when gameOver is false\r\n    */\r\n    const gameView = \r\n     (<div className=\"canvas\">\r\n        <UpperObstacles onUpdate={getUpperObstaclesCoordinates} score={score}/>\r\n        <LowerObstacles onUpdate={getLowerObstaclesCoordinates} score={score}/>\r\n        <Player onPlayerMove={getPlayerCoordinates}/>\r\n      </div>\r\n     )\r\n    \r\n    /*\r\n      When gameOver becomes true the gameView is replaced by this gameOver view\r\n     */\r\n    const gameOverView =(\r\n        <div className=\"gameOver\">\r\n          <h1>Game Over</h1>\r\n          <ImSad size={50}/>\r\n          <h2>Score {score}</h2>\r\n          <button onClick={resetGame}>New Game</button>\r\n        </div>)\r\n    \r\n    return (\r\n    <div className=\"main\">\r\n      {gameOver? gameOverView : gameView}\r\n      <Score score={score} \r\n             highScore={highScore}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module"}